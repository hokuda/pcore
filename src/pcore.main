#!/usr/bin/python
# -*- coding: utf-8 -*-
#!/usr/bin/pudb

VERSION = "#VERSION#"

try:
    import argparse
    HAS_ARGPARSE = True
except:
    import optparse
    HAS_ARGPARSE = False
import sys
import time
import subprocess
import re
import os
import shutil
import logging
import tarfile
import zlib
import base64
import stat

os.environ["LANG"]="C"

def my_name():
    index = sys.argv[0].rindex("/");
    return sys.argv[0][index+1:]

NOW = time.strftime("%Y-%m-%d-%H.%M.%S")
THIS = my_name()
WORKDIR = THIS + "-" + NOW
EU_READELF = "/usr/bin/eu-readelf"
EU_UNSTRIP = "/usr/bin/eu-unstrip"
ELFUTILS_PKG = "elfutils"
GDBINIT = "gdbinit"
OPENCORE = "opencore.sh"
GETDEBUGINFO = "getdebuginfo"
DEBUGFILES="debugfiles.txt"
INSTALLEDRPMS="installed_rpms.txt"
RELATEDRPMS="related_rpms.txt"
OPT_DEBUG = False
OPT_NOCORE = False
OPT_EXEC = ""
OPT_CORE = ""
GETDEBUGINFO_GZB64 = '#EMBED#'

REDHAT_RELEASE_FILE = '/etc/redhat-release'

logging.basicConfig()
LOGGER = logging.getLogger(__name__)


def parse_options():
    """
    >>> import sys
    >>> sys.argv = ['test', '-c', 'pcore.main', '-e', 'pcore.main']
    >>> parse_options()
    Namespace(_exec='pcore.main', core='pcore.main', debug=False, no_core=False)
    """
    global OPT_DEBUG
    global OPT_NOCORE
    global OPT_EXEC
    global OPT_CORE

    this = sys.argv[0]
    example_core_file = "./core." + str(os.getpid())
    example_exec_file = "/usr/sbin/httpd"
    example_installed_rpms = "./sosreport/installed-rpms"
    parser = argparse.ArgumentParser(
        description="Core analysis aid tool to fake up a customer's environment",
        epilog="Example:\n" + \
        "  " + this + " -c " + example_core_file + " -e " + example_exec_file + "\n" + \
        "  " + this + " -c " + example_core_file + " -i " + example_installed_rpms,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        '-n',
        '--no-core',
        action='store_true',
        help="do not include a core in pcore-<timestamp>(.tar.bz2)"
    )
    def _exists(path):
        if not os.path.exists(path):
            raise argparse.ArgumentTypeError("{0} does not exist".format(path))
    def _is_file(path):
        if not os.path.isfile(path):
            raise argparse.ArgumentTypeError("{0} is not a file".format(path))
    def _is_readable(path):
        if not os.access(path, os.R_OK):
            raise argparse.ArgumentTypeError("{0} is not readable".format(path))
    def _is_readable_file(path):
        _exists(path)
        _is_file(path)
        _is_readable(path)
        return path
    def _is_readable_executable_file(path):
        _exists(path)
        _is_file(path)
        _is_readable(path)
        if not os.access(path, os.X_OK):
            raise argparse.ArgumentTypeError("{0} is not executable".format(path))
        return path
    parser.add_argument(
        '-c',
        '--core',
        action='store',
        help="target core file to analyze",
        type=_is_readable_file,
        required=True,
    )
    parser.add_argument(
        '-e',
        '--exec',
        action='store',
        help="exec file from which the core is based",
        type=_is_readable_executable_file,
        metavar="EXEC",
        # reserved term 'exec' is not usable in an object parser.parse_args() returns
        dest='_exec',
        required=True,
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help=argparse.SUPPRESS # do not show this arg in help
    )
    opts = parser.parse_args()

    OPT_DEBUG = opts.debug
    OPT_NOCORE = opts.no_core
    OPT_EXEC = opts._exec
    OPT_CORE = opts.core
    return opts # for doctest


def make_working_dir():
    print("making working directory: " + WORKDIR)
    if not os.path.exists(WORKDIR):
        os.makedirs(WORKDIR)


def remove_working_dir():
    print("removing working directory: " + WORKDIR)
    if os.path.exists(WORKDIR):
        shutil.rmtree(WORKDIR)


def open_log():
#    logging.basicConfig(
#        level=logging.DEBUG,
#        filename=WORKDIR + '/pcore.log',
#        format="%(asctime)s %(levelname)s %(message)s")
    global LOGGER
    formatter = logging.Formatter('%(asctime)s %(lineno)d %(levelname)s %(message)s')
    file_log_handler = logging.FileHandler(WORKDIR + '/pcore.log')
    file_log_handler.setFormatter(formatter)
    file_log_handler.setLevel(logging.DEBUG)
    LOGGER.addHandler(file_log_handler)
    stderr_log_handler = logging.StreamHandler(sys.stderr)
    stderr_log_handler.setFormatter(formatter)
    #stderr_log_handler.setLevel(logging.INFO)
    stderr_log_handler.setLevel(logging.DEBUG)
    LOGGER.addHandler(stderr_log_handler)
    LOGGER.setLevel(logging.DEBUG)


def has_elfutils():
    return os.access(EU_READELF, os.X_OK)


def parse_eu_unstrip_output(out):
    """
    parses eu-unstrip output and returns libraries and build ID's as lists

    >>> out = \"\"\"0x7ffe0cdfb000+0x1000 ca61561a25b68c98866b0165bfa50fa32b6330e5@0x7ffe0cdfb7c0 . - linux-vdso.so.1
    ... 0x7f8274c6b000+0x241fe8 cadd6f2791c3e1248fa7a0ea0a6218f950ca3cce@0x7f8274c6b210 /lib64/libnss_systemd.so.2 - libnss_systemd.so.2
    ... 0x7f827589a000+0x208310 bd87dd97c1275e702b8665ded8d5071fa6699949@0x7f827589a1d8 /lib64/libnss_sss.so.2 - libnss_sss.so.2
    ... 0x7f8275cb5000+0x210118 e2a1521a7f2e8f0d883f46115d5ef1f797e4b9c4@0x7f8275cb51d8 /etc/httpd/modules/mod_proxy_http2.so - mod_proxy_http2.so
    ... \"\"\"
    >>> parse_eu_unstrip_output(out)
    (['/lib64/libnss_systemd.so.2', '/lib64/libnss_sss.so.2', '/etc/httpd/modules/mod_proxy_http2.so'], ['cadd6f2791c3e1248fa7a0ea0a6218f950ca3cce', 'bd87dd97c1275e702b8665ded8d5071fa6699949', 'e2a1521a7f2e8f0d883f46115d5ef1f797e4b9c4'])
    """
    lines = [l for l in out.split("\n") if ((l.find("linux-vdso") == -1) and (len(l) != 0))]
    libs = [l.split()[2] for l in lines]
    LOGGER.debug("parse_eu_unstrip_output: libs=" + str(libs))
    ids = [l.split()[1].split('@')[0] for l in lines]
    LOGGER.debug("parse_eu_unstrip_output: ids=" + str(ids))
    return libs, ids


def get_libs_and_build_ids(exec_file, core_file):
    """
    runs `eu-unstrip -n --core core_file -e core_file`, and parses output to return libraries and build ID's
    """
    command = "{0} -n --core {1} -e {2}".format(EU_UNSTRIP, core_file, exec_file)
    LOGGER.info("get_libs_and_build_ids: running " + command)
    out = subprocess.check_output(command.split(), stderr=subprocess.STDOUT).decode('utf-8')
    LOGGER.debug("get_libs_and_build_ids: out=" + out)
    libs, ids = parse_eu_unstrip_output(out)
    return libs, ids


def get_build_id(file):
    LOGGER.info("running eu-readelf -n " + file)
    command = EU_READELF + " -n " + file
    out = subprocess.check_output(command.split()).decode('utf-8')
    LOGGER.debug(out)
    pattern = re.compile(r".*Build ID: ([0-9a-f]+)")
    build_id = ""
    for l in out.split('\n'):
        m = pattern.match(l)
        if m != None:
            build_id = m.group(1)
            break
    LOGGER.debug(command + "\n--------\n" + out + "\n--------\n" + build_id)
    return build_id

def copy_to_workdir(file, omit_dirname=False):
    """
    If omit_dirname is True, copies file to WORKDIR.
    Othrewise, copies file to WORKDIR + "/" + os.path.dirname(file).
    If file is copied successfully, returns True.
    Otherwise, False.

    # test: omit_dirname=False
    >>> import os
    >>> import tempfile
    >>> tmpfile = tempfile.NamedTemporaryFile()
    >>> copy_to_workdir(tmpfile.name)
    True
    >>> os.path.exists(WORKDIR + tmpfile.name)
    True
    >>> shutil.rmtree(WORKDIR)

    # test: omit_dirname=True
    >>> copy_to_workdir(tmpfile.name, omit_dirname=True)
    True
    >>> os.path.exists(WORKDIR + '/' + os.path.basename(tmpfile.name))
    True
    >>> shutil.rmtree(WORKDIR)

    # test: copying non-existing file
    >>> copy_to_workdir('/tmp/_no_such_file_', omit_dirname=True)
    False
    """
    if omit_dirname==True:
        copydir = WORKDIR
    else:
        copydir = WORKDIR + "/" + os.path.dirname(file)
    LOGGER.info("copy_to_workdir: copying " + file + " to " + copydir)
    if not os.path.exists(file):
        LOGGER.warning("copy_to_workdir: " + file + " is not found")
        return False
    if not os.path.exists(copydir):
        try:
            os.makedirs(copydir)
        except Exception as e:
            LOGGER.warning("copy_to_workdir: Could not make " + copydir)
            LOGGER.warning(e.__str__())
            return False
    try:
        shutil.copy(file, copydir)
    except Exception as e:
        LOGGER.warning("copy_to_workdir: Failed to copy " + file)
        LOGGER.warning(e.__str__())
        return False
    return True

def create_gdbinit():
    filename = WORKDIR + "/" + GDBINIT
    LOGGER.info("writing " + filename)
    file = open(filename, "w")
    file.write("set sysroot $pwd\n")
    file.write("set print pretty on\n")
    file.write("set debug-file-directory ./usr/lib/debug\n")
    file.write("set solib-absolute-prefix ./\n")
    file.write("set substitute-path / ./\n")
    file.write("file " + os.path.basename(OPT_EXEC) + "\n")
    file.write("core-file " + os.path.basename(OPT_CORE) + "\n")
    file.close()

def create_opencore():
    filename = WORKDIR + "/" + OPENCORE
    LOGGER.info("writing " + filename)
    file = open(filename, "w")
    file.write("#!/bin/sh\n")
    file.write("gdb -command=" + GDBINIT + "\n")
    file.close()
    os.chmod(filename, stat.S_IRWXU)

def create_debugfiles(bid_list):
    filename = WORKDIR + "/" + DEBUGFILES
    LOGGER.info("writing " + filename)
    file = open(filename, "w")
    for bid in bid_list:
        file.write(get_debugfile_path(bid) + "\n")
    file.write(get_debugfile_path(get_build_id(OPT_EXEC)) + "\n")
    file.close()

def create_get_debuginfo():
    filename = WORKDIR + "/" + GETDEBUGINFO
    LOGGER.info("writing " + filename)
    file = open(filename, "w")
    script = zlib.decompress(base64.standard_b64decode(GETDEBUGINFO_GZB64)).decode('utf-8')
    file.write(script)
    file.close()
    os.chmod(filename, stat.S_IRWXU)

def create_tar_ball():
    LOGGER.info("archiving data...")
    tar = tarfile.open(WORKDIR + ".tar.bz2", "w:bz2")
    tar.add(WORKDIR)
    tar.close()
    LOGGER.info(WORKDIR + ".tar.bz2 created")

def get_debugfile_path(bid):
    LOGGER.info("get_debugfile_path: Build ID = " + bid)
    path = "/usr/lib/debug/.build-id/" + bid[0:2] + "/" + bid[2:]
    LOGGER.info("get_debugfile_path: Debug File Path = " + path)
    return path

def create_installedrpms():
    filename = WORKDIR + "/" + INSTALLEDRPMS
    LOGGER.info("writing " + filename)
    file = open(filename, "w")
    command = "rpm -qa"
    out = subprocess.check_output(command.split()).decode('utf-8')
    file.write(out)
    file.close()


def create_relatedrpms(libs):
    filename = WORKDIR + "/" + RELATEDRPMS
    LOGGER.info("writing " + filename)
    file = open(filename, "w")
    command = "rpm -qf " + ' '.join(libs + [OPT_EXEC])
    out = subprocess.check_output(command.split(), stderr=subprocess.STDOUT).decode('utf-8')
    file.write(out)
    file.close()


def get_redhat_release():
    with open(REDHAT_RELEASE_FILE, mode='r') as f:
        return f.readline()


def is_rhel7():
    if get_redhat_release().startswith('Red Hat Enterprise Linux Server release 7'):
        return True
    else:
        return False


def is_rhel8():
    if get_redhat_release().startswith('Red Hat Enterprise Linux release 8'):
        return True
    else:
        return False


def is_f29():
    if get_redhat_release() == 'Fedora release 29 (Twenty Nine)\n':
        return True
    else:
        return False


def is_f30():
    if get_redhat_release() == 'Fedora release 30 (Thirty)\n':
        return True
    else:
        return False


def is_supported_platform():
    return (
        is_rhel7()
        or is_rhel8()
        or is_f29()
        or is_f30()
    )

def die_if_unsupported_platform():
    if not is_supported_platform():
        sys.exit("this works only on RHEL7/8, and Fedora29~30")

def die_if_no_elfutils():
    """
    pcore dies if elfutils is not installed, since the eu-readelf command in
    elfutils is required to determin debuginfo package name/version.
    """
    if not has_elfutils():
        sys.exit("pcore requires {0}. Run `yum install {0}`.".format(ELFUTILS_PKG))


def copy_libs(libs):
    list(map(copy_to_workdir, libs))

def copy_exec():
    LOGGER.info("copying " + OPT_EXEC + " to " + WORKDIR)
    copy_to_workdir(OPT_EXEC, omit_dirname=True)

def copy_core():
    if OPT_NOCORE:
        LOGGER.info(OPT_CORE + " is not copied.")
    else:
        LOGGER.info("copying " + OPT_CORE + " to " + WORKDIR)
        copy_to_workdir(OPT_CORE, omit_dirname=True)


def main():
    die_if_unsupported_platform()
    die_if_no_elfutils()
    parse_options()
    make_working_dir()
    open_log()
    LOGGER.info(my_name() + " version: " + VERSION)
    libs, build_ids= get_libs_and_build_ids(OPT_EXEC, OPT_CORE)
    copy_libs(libs)
    copy_exec()
    copy_core()
    create_gdbinit()
    create_opencore()
    create_installedrpms()
    create_relatedrpms(libs)
    create_get_debuginfo()
    create_debugfiles(build_ids)
    if OPT_DEBUG:
        print("\n[debug] stored in " + WORKDIR + "\n\n")
    else:
        create_tar_ball()
        remove_working_dir()

if __name__ == "__main__":
    if __file__ == "./test":
        import doctest
        doctest.testmod(verbose=True)
        sys.exit(0)
    main()
